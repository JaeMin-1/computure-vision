# -*- coding: utf-8 -*-
"""overfitting.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17cm3ckzvzp2tpZNhBKm4-jKvBlv2SZMm
"""

import tensorflow as tf
import matplotlib.pyplot as plt

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train[:200]
y_train = y_train[:200]

#overfitting이 발생하는 기존 model
#model = tf.keras.models.Sequential([
#    tf.keras.layers.Flatten(input_shape=(28, 28)),
#    tf.keras.layers.Dense(512, activation=tf.nn.relu),
#    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])

# keras를 이용해 dropout layer를 적용한 새로운 model
from tensorflow import keras
model = keras.Sequential([
	    keras.layers.Flatten(input_shape=(28, 28)),
            keras.layers.Dense(128, activation='relu'),
            keras.layers.Dropout(0.5),
            keras.layers.Dense(10, activation='softmax')])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(x_train, y_train, validation_split=0.25, epochs=10, verbose=1)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()